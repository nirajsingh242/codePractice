package java8questions;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class InterviewQuestions {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Given a list of integers, find out all the 
		//even numbers that exist in the list using Stream functions?
		System.out.println("Given a list of integers, find out all the even numbers that exist in the list using Stream functions?");
		
		List<Integer> list = Arrays.asList(10,15,8,49,25,98,32);
		List<Integer> evenNumber = list.stream().filter(n->n%2==0).collect(Collectors.toList());

		evenNumber.stream().forEach(System.out::println);
		
		System.out.println("");
		System.out.println(". Given a list of integers, find out all the numbers starting with 1 using Stream functions?");
		
		List<Integer> myList = Arrays.asList(10,15,8,49,25,98,32);
		myList.stream().map(s->s+"").
		filter(s->s.startsWith("1")).
		collect(Collectors.toList()).
		stream().forEach(System.out::println);
		
		System.out.println("");
		System.out.println("How to find duplicate elements in a given integers list in java using Stream functions?");
	
		 List<Integer> myListInt = Arrays.asList(10,15,8,49,25,98,98,32,15);
		 Set<Integer> set=new HashSet();
		 set.add(null);
		 myListInt.stream().
		 filter(n->!set.add(n)).
		 collect(Collectors.toList()).
		 stream().forEach(System.out::println);
		 
		 System.out.println("distinct keyword : no duplicate data");
		 //distinct keyword
		 myListInt.stream().distinct().
		 collect(Collectors.toList()).
		 stream().forEach(System.out::println);
		 
		
		 System.out.println("");
		 System.out.println(" Given the list of integers, find the first element of the list using Stream functions?");
		 Arrays.asList(10,15,8,49,25,98,98,32,15).stream().findFirst().ifPresent(System.out::println);
		
		
		 System.out.println("");
		 System.out.println("5. Given a list of integers, find the total number of elements present in the list using Stream functions?");
		 System.out.println(Arrays.asList(10,15,8,49,25,98,98,32,15).stream().count());
		 
		 
		 System.out.println("");
		 System.out.println(". Given a list of integers, find the maximum value element present in it using Stream functions?");
		 System.out.println(Arrays.asList(10,15,8,49,25,98,98,32,15).stream().max(Integer::compare).get());
		 
		 System.out.println("");
		 System.out.println(". Given a String, find the first non-repeated character in it using Stream functions?");
		
		  String input = "Java articles are Awesome";
		  
		  char ans=input.chars().mapToObj(c->(char)c).
		  filter(c->input.indexOf(c)==input.lastIndexOf(c)).findFirst().orElse(null);
		  
		  System.out.println("ans :"+ans);
		  
		  System.out.println("");
		  System.out.println(". Given a String, find the first repeated character in it using Stream functions?");
			
		  char ans1=input.chars().mapToObj(c->(char)c).
				  filter(c->input.indexOf(c)!=input.lastIndexOf(c)).findFirst().orElse(null);
		  System.out.println("ans :"+ans1);
		  
		  
		  //
		  System.out.println("");
		  System.out.println(".Given a list of integers, sort all the values present in it using Stream functions?");
			
		  List<Integer> myListSort = Arrays.asList(10,15,8,49,25,98,98,32,15); 
		  myListSort.stream().sorted().collect(Collectors.toList()). 
		  forEach(System.out::println);
		  
		  System.out.println("");
		  System.out.println("Given a list of integers, sort all the values present in it in descending order using Stream functions?\r\n"
		  		+ "\r\n"
		  		+ "import java.util.*;");
		  myListSort.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()). 
		  forEach(System.out::println);
		  
		  
		  System.out.println("");
		  System.out.println("Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.");
		 
		 int[] nums = {1,2,3,1};
		 System.out.println(containsDuplicate(nums));
		 int[] nums1= {1,2,3,4};
		 System.out.println(containsDuplicate(nums1));
		 
		   System.out.println("Current Local Date: " + java.time.LocalDate.now());
	        //Used LocalDate API to get the date
	        System.out.println("Current Local Time: " + java.time.LocalTime.now());
	        //Used LocalTime API to get the time
	        System.out.println("Current Local Date and Time: " + java.time.LocalDateTime.now());
	        //Used LocalDateTime API to get both date and time

	        System.out.println("");
			  
	        List<String> list1 = Arrays.asList("Java", "8");
	        List<String> list2 = Arrays.asList("explained", "through", "programs");
	 
	        Stream<String> concatStream = Stream.concat(list1.stream(), list2.stream());
	         
	        // Concatenated the list1 and list2 by converting them into Stream
	 
	        concatStream.forEach(str -> System.out.print(str + " "));
	        
	        
	        int arr[] = { 99, 55, 203, 99, 4, 91 };
	        Arrays.parallelSort(arr);
	        // Sorted the Array using parallelSort()
	         
	        Arrays.stream(arr).forEach(n > System.out.print(n + " "));
	     
		 
	}
	public static boolean containsDuplicate(int[] nums) {
	    List<Integer> list = Arrays.stream(nums)
	                               .boxed()
	                               .collect(Collectors.toList());
	    Set<Integer> set = new HashSet<>(list);
	     if(set.size() == list.size()) {
	       return false;
	   } 
	      return true;
	}

}
