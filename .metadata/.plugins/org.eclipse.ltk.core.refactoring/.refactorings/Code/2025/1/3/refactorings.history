<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;inputString.chars().mapToObj(c -&gt; (char)c).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;inputString.chars().mapToObj(c -&gt; (char)c).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="collect" replace="true" selection="332 117" stamp="1736841334862" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;stationeryList.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;collect2&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;stationeryList.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="collect2" replace="true" selection="931 98" stamp="1736841729399" varType="false" version="1.0"/>&#x0A;<refactoring comment="Rename resource &apos;Code/src/java8questions/Untitled 1&apos; to &apos;notes&apos;" description="Rename resource &apos;Untitled 1&apos;" flags="7" id="org.eclipse.ltk.core.refactoring.rename.resource" input="src/java8questions/Untitled 1" name="notes" stamp="1736841839621" updateReferences="true"/>&#x0A;<refactoring comment="Extract local variable &apos;array&apos; from expression &apos;IntStream.concat(Arrays.stream(a),Arrays.stream(b)).sorted().distinct().toArray()&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;array&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;IntStream.concat(Arrays.stream(a),Arrays.stream(b)).sorted().distinct().toArray()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;array&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="array" replace="true" selection="2495 83" stamp="1736842913220" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect3&apos; from expression &apos;Stream.of(s1.split(&quot;&quot;)).map(s -&gt; s.toUpperCase()).sorted(Comparator.naturalOrder()).collect(Collectors.joining())&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;collect3&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;Stream.of(s1.split(&quot;&quot;)).map(s -&gt; s.toUpperCase()).sorted(Comparator.naturalOrder()).collect(Collectors.joining())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect3&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="collect3" replace="true" selection="4201 112" stamp="1736843461695" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;integer&apos; from expression &apos;listOfIntegersss.stream().sorted(Comparator.reverseOrder()).skip(1).findFirst().get()&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;integer&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;listOfIntegersss.stream().sorted(Comparator.reverseOrder()).skip(1).findFirst().get()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;integer&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="integer" replace="true" selection="5026 86" stamp="1736843939832" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect5&apos; from expression &apos;listOfStringss.stream().sorted(Comparator.comparing(String::length)).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;collect5&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;listOfStringss.stream().sorted(Comparator.comparing(String::length)).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect5&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="collect5" replace="true" selection="5416 98" stamp="1736844118209" varType="false" version="1.0"/>&#x0A;&#x0A;<refactoring comment="Extract local variable &apos;collect6&apos; from expression &apos;listOfStringsss.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;collect6&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;listOfStringsss.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect6&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="collect6" replace="true" selection="6374 99" stamp="1736845488569" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;entry&apos; from expression &apos;collect6.entrySet().stream().max(Map.Entry.comparingByValue()).get()&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;entry&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;collect6.entrySet().stream().max(Map.Entry.comparingByValue()).get()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;entry&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="entry" replace="true" selection="6508 69" stamp="1736845541401" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;noneMatch&apos; from expression &apos;IntStream.range(0,str1.length() / 2).noneMatch(j -&gt; str1.charAt(j) != str1.charAt(str1.length() - 1 - j))&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;noneMatch&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;IntStream.range(0,str1.length() / 2).noneMatch(j -&gt; str1.charAt(j) != str1.charAt(str1.length() - 1 - j))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;noneMatch&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="noneMatch" replace="true" selection="6781 104" stamp="1736846073583" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect7&apos; from expression &apos;Stream.of(inputString1.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),LinkedHashMap::new,Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;collect7&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;Stream.of(inputString1.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),LinkedHashMap::new,Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect7&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="collect7" replace="true" selection="7185 132" stamp="1736847768353" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;entry2&apos; from expression &apos;collect7.entrySet().stream().filter(k -&gt; k.getValue() &gt; 1).findFirst().get()&apos;&#x0D;&#x0A;- Original project: &apos;Code&apos;&#x0D;&#x0A;- Variable name: &apos;entry2&apos;&#x0D;&#x0A;- Destination method: &apos;java8questions.JavaConceptPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;collect7.entrySet().stream().filter(k -&gt; k.getValue() &gt; 1).findFirst().get()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;entry2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8questions{JavaConceptPractice.java" name="entry2" replace="true" selection="7357 73" stamp="1736847845350" varType="false" version="1.0"/>
</session>